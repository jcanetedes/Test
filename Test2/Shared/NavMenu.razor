@using Test.Core.Interfaces
@using Test2.Core
@inject IMenuService MenuService
<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">Test2</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <ul class="nav flex-column">
        <li class="nav-item px-3">
            @foreach (var manifest in Manifests)
            {
                <NavLink class="nav-link" href="@GenerateHref(manifest.ProjectName,"Index")" @onclick="()=>manifest.IsExpanded = !manifest.IsExpanded">
                    <span class="oi oi-list-rich" aria-hidden="true"></span> @manifest.ProjectName
                </NavLink>
                @if (manifest.IsExpanded)
                {
                    <ul class="nav flex-column">
                    @foreach(var menu in manifest.Menus)
                    {
                            <li class="nav-item px-3">
                                <NavLink class="expand-menu" href="@GenerateHref(manifest.ProjectName, menu.ComponentName)">
                                    <span>@menu.MenuName</span>
                                </NavLink>
                            </li>
                    }
                    </ul>
                }
            }
        </li>
    </ul>
</div>

@code {
    private bool expandSubNav;
    private bool collapseNavMenu = true;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private List<IManifest> Manifests = new List<IManifest>();

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    protected override void OnInitialized()
    {
        Manifests = MenuService.GetPluginManifest();
    }

    private string GenerateHref(string pluginName, string component)
    {
        return $"{pluginName}/{component}";
    }
}
